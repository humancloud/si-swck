#
# Copyright (c) 2019 Stackinsights to present
# All rights reserved
#

# static configuration of OAPServer
apiVersion: operator.stackinsights.apache.org/v1alpha1
kind: OAPServerConfig
metadata:
  name: oapserverconfig-sample
  namespace: stackinsights-system
spec:
  # The version of OAPServer
  version: 9.5.0
  # The env configuration of OAPServer
  env:
    - name: ONLY_TEST
      value: testonly
    - name: JAVA_OPTS
      value: -Xmx2048M
    - name: SW_CLUSTER
      value: kubernetes
    - name: SW_CLUSTER_K8S_NAMESPACE
      value: stackinsights-system
    # enable the dynamic configuration
    - name: SW_CONFIGURATION
      value: k8s-configmap
    # set the labelselector of the dynamic configuration
    - name: SW_CLUSTER_K8S_LABEL
      value: app=collector,release=stackinsights
    - name: SW_TELEMETRY
      value: prometheus
    - name: SW_HEALTH_CHECKER
      value: default
    - name: SKYWALKING_COLLECTOR_UID
      valueFrom:
        fieldRef:
          fieldPath: metadata.uid
    - name: SW_LOG_LAL_FILES
      value: test1
    - name: SW_LOG_MAL_FILES
      value: test2
  # The file configuration of OAPServer
  # we should avoid setting the same name in the file
  file:
    - name: test1.yaml
      path: /stackinsights/config/lal
      data: |
        rules:
          - name: example
            dsl: |
              filter {
                text {
                  abortOnFailure false // for test purpose, we want to persist all logs
                  regexp $/(?s)(?<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3}) \[TID:(?<tid>.+?)] \[(?<thread>.+?)] (?<level>\w{4,}) (?<logger>.{1,36}) (?<msg>.+)/$
                }
                extractor {
                  metrics {
                    timestamp log.timestamp as Long
                    labels level: parsed.level, service: log.service, instance: log.serviceInstance
                    name "log_count"
                    value 1
                  }
                }
                sink {
                }
              }
    - name: test2.yaml
      path: /stackinsights/config/log-mal-rules
      data: |
        expSuffix: instance(['service'], ['instance'], Layer.GENERAL)
        metricPrefix: log
        metricsRules:
          - name: count_info
            exp: log_count.tagEqual('level', 'INFO').sum(['service', 'instance']).downsampling(SUM)
